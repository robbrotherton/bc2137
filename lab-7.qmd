# Lab 7: Data preparation & analysis {.unnumbered}

You will start this lab with your variables determined. By the end, you will have prepared the data in R and computed the required descriptive statistics and the ANOVA itself.

### Goals

- Select required variables
- Recode categorical variables
- Compute your ANOVA


## Data preparation

### Set up 

As before, the first step is to prepare your R environment by loading required packages and reading in the data from its .csv file. The will be exactly the same as with the previous project.

```{r}
#| message: false

library(tidyverse)

data <- read_csv("data/anes_2020.csv")

```


### Select variables

For this example, I'm going to use the "trust the media" question--the same one I used for the correlation example--as my dependent variable.^[In general, how much trust and confidence do you have in the news media when it comes to reporting the news fully, accurately, and fairly?] For the partisanship quasi-IV, I'll use the party registration question. And for the life experience, I'm going to use one I didn't let you choose from (because not many people said yes, and... well, you'll see): "Have you ever been bitten by a shark, or not?" (V202569).

```{r}

my_data_raw <- data |> 
  select(trust = V201377, 
         party = V201018,
         experience = V202569)

```


### Recode variables

In the raw data responses to the categorical quasi-IVs are coded as numbers: 1s and 2s for "Democrat"/"Republican" and "yes"/"no", and some other numeric codes for other responses or invalid/missing answers. You'll need to check the codebook to determine exactly what all the numbers mean. Our first step is to "recode" these raw numbers into more meaningful answers, keeping only the ones we need and turning other answers, or negative numbers representing missing data, into `NA`--R's representation of missing data.

We'll use `dplyr`'s `mutate()` function, which creates new variables or changes (*mutates*) existing ones. To achieve the desired result we'll use `dplyr`'s `case_when()` function, which allows us to specify a condition and the value to assign if that condition is met. So for example `party == 1 ~ "Democratic"` can be read as "if the value of `party` is `1` then assign the value *'Democratic'*." Since the original variable is named "party" and I'm using that name for the mutated variable, the column will be changed in place. Note that I only specify the numeric codes that I want to retain for my analysis; answers other than 1 or 2 will become `NA` since I don't specify otherwise.


```{r}
my_data <- my_data_raw |> 
  filter(if_all(everything(), ~ . > 0)) |>
  mutate(party = case_when(
    party == 1 ~ "Democratic",
    party == 2 ~ "Republican"
  )) |> 
  mutate(experience = case_when(
    experience == 1 ~ "Yes",
    experience == 2 ~ "No"
  )) 
```


## Analysis

### Descriptive statistics

Before computing the ANOVA itself, the first step is to compute descriptive statistics--the mean and standard deviation--for each grouping of participants in our data. With a 2x2 design there are a few different ways to group up the data, corresponding to the 3 hypotheses we aim to test.

First we'll find the "marginal means". These are relevant to testing and interpreting the "main effects". Finding this kind of mean is slightly more complicated than when we just needed to find the mean of each column in a data.frame like we did for the correlation project. This time, we want the mean from one column broken into groups based on the value of a different column; mean trust by party affiliation, and mean trust by life experience.

As usual there are a lot of ways of doing this, but one of the most powerful is `dplyr`'s `summarize()` function. It allows you to compute summary values using other functions, such as `mean(trust)` to compute the mean of the trust column, and you can specify a grouping variable using the `.by` argument. And you aren't limited to computing a single summary variable; here I also compute the standard deviation (using the `sd()` function) and number of observations in each group (using the `n()` function).

```{r}
my_data |> 
  summarize(mean = mean(trust), 
            sd = sd(trust),
            n = n(),
            .by = party) |> 
  drop_na()

my_data |> 
  summarize(mean = mean(trust), 
            sd = sd(trust),
            n = n(),
            .by = experience)

```


In addition to those marginal means we need to find all 4 "cell means," a mean trust score for each of the possible combinations of the political party and life experience groups: Democrats who have been bitten by a shark; Democrats who haven't been bitten by a shark; Republicans who have been bitten by a shark; Republicans who haven't been bitten by a shark. This sounds like a lot of work, but thankfully it can be achieved with a very minor tweak to the `summarize()` approach we used before: we just supply both grouping variables to the `.by` argument at the same time, "collecting" the variable names together with the `c()` function.

Thinking ahead, I'm going to want to make a graph showing these 4 means, and I'd like the graph to have "error bars" representing the confidence interval for each mean. There's no built-in function to compute a confidence interval, so I'm going to make my own.

```{r}
ci <- function(x) {
  qt(0.975, df = length(x) - 1) * sqrt( var(x) / length(x))
}
```

Now I'm ready to compute the mean, SD, number of observations, and confidence interval for each of the 4 groups. 

```{r}
my_data_summary <- my_data |> 
  summarise(mean = mean(trust), 
            sd = sd(trust),
            n = n(),
            ci = ci(trust),
            .by = c(party, experience)) |> 
  drop_na()

my_data_summary
```

Note that I assigned this data summary to a new name, `my_data_summary`, so it becomes a new data.frame object in my environment. That's going to be useful later, because it is these summary statistics that I will use to make a graph of the results.

### ANOVA

The `aov()` function computes an ANOVA. By itself, `aov()` doesn't output all the information we want to see; that's why I pipe it into the `summary()` function below.

The first argument to the `aov()` function is a formula, in the form `DV ~ IV1 * IV2`. The second argument is `data`, to which I supply the name of the data.frame containing my data; that's how the formula in which we name the columns can work, since supplying the data.frame to the `data` argument tells the function where to find those columns.[^aov-note]

```{r}

aov(trust ~ party * experience, data = my_data) |> 
  summary()

```

You should see three lines with your variable names, followed by a line for "Residuals" (which you can ignore). Those three lines are your three hypothesis tests: two main effects and the interaction. Each line shows the "degrees of freedom" ("Df"), $F$ value, and $p$-value ("Pr(>F)"). (Sum Sq and Mean Sq don't need to be reported). If the $p$-value is less than $0.05$, that test is "statistically significant."

Interpreting this can be difficult, so we'll follow this up in the next lab with some visualization which can make understanding the pattern of results easier.

## To do for next time

Read another of the papers you found. The more detailed your understanding of the existing research, the better you will be able to justify your choice of variables and interpret the results of your analysis.





[^aov-note]: It would be more elegant if I could pipe the data into `aov()` and then pipe that into `summary()`, like this:
      
          my_data |> 
            aov(trust ~ party * experience) |> 
            summary()
          
      Unfortunately that won't work, because by default the pipe operator inserts the output of the previous line of code into the *first* argument of the next line. Since `aov()` is a base R function and the pipe is a more recent innovation, `aov()` wasn't designed with this in mind. If it was, `data` would be the first argument and the pipe would work. There is a way to make it work, by using the `_` special character, which R's pipe operator understands as a placeholder for the pipe's output, to specifically place the output into `aov()`'s `data` argument:
      
          my_data |> 
            aov(trust ~ party * experience, data = _) |> 
            summary()
            
      It's not very elegant in this case, which is why I didn't bother, but knowing about the `_` placeholder can be useful in general.
